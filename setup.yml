# execute with ansible-playbook -i 'localhost,' setup.yml

- hosts: localhost
  connection: local
  sudo: True
  vars:
    dropbox:
      version: 1.6.0
      sha256: 3d96207244a6897cb23de088b3c4c8c2f93cce1baab4d5b74a224484b16c6202
    crashplan:
      version: 3.6.3
      sha256: 605580cfc6aecb3acdc10baa6afc448ac07d960dafdbaa2e35b92f61d877016c
    nix_installer:
      sha256: 9a20b31afe264646acaaac54e2f5ab1be6247feda4dedf4a26affcec0ea084ac
    keepass_http:
      sha256: e37e1dcb762b470fd4091c61c5db693652790549459b9a3a9b7fa1257ea69edf

  tasks:
    - name: Check if dropbox is already installed
      stat: path=/usr/bin/dropbox
      register: dropbox

    - name: Download dropbox
      when: not dropbox.stat.exists
      get_url: url="https://www.dropbox.com/download?dl=packages/debian/dropbox_{{dropbox.version}}_amd64.deb" dest=/tmp/dropbox.deb sha256sum={{dropbox.sha256}}

    - name: Install gpgme (needed to verify dropbox installation)
      apt: name=python-gpgme

    - name: Install dropbox
      when: not dropbox.stat.exists
      apt: deb=/tmp/dropbox.deb

    - name: Check if crashplan is already installed
      stat: path=/usr/local/bin/CrashPlanDesktop
      register: crashplan

    - name: Download crashplan
      when: not crashplan.stat.exists
      get_url: url="http://download.code42.com/installs/linux/install/CrashPlan/CrashPlan_{{crashplan.version}}_Linux.tgz" dest=/tmp/crashplan.tgz sha256sum={{crashplan.sha256}}

    - name: Extract crashplan
      when: not crashplan.stat.exists
      unarchive: src=/tmp/crashplan.tgz copy=no dest=/tmp/

    - name: Install java
      apt: name=openjdk-7-jre

    - name: Increase inotify watches
      # lineinfile: dest=/proc/sys/fs/inotify/max_user_watches regexp='' line=" 1500000" # doesn't work
      shell: echo "1500000" | tee /proc/sys/fs/inotify/max_user_watches

    - name: Install crashplan
      when: not crashplan.stat.exists
      shell: xterm ./install.sh chdir=/tmp/CrashPlan-install

    - name: Increase inotify watches (persist)
      lineinfile: dest=/etc/sysctl.conf line="fs.inotify.max_user_watches=1500000"

    - name: Fix CrashPlan webkit bug
      lineinfile: dest=/usr/local/crashplan/bin/run.conf regexp='^GUI_JAVA_OPTS' backup=yes line='GUI_JAVA_OPTS="-Dfile.encoding=UTF-8 -Dapp=CrashPlanDesktop -DappBaseName=CrashPlan -Xms20m -Xmx512m -Djava.net.preferIPv4Stack=true -Dsun.net.inetaddr.ttl=300 -Dnetworkaddress.cache.ttl=300 -Dsun.net.inetaddr.negative.ttl=0 -Dnetworkaddress.cache.negative.ttl=0 -Dc42.native.md5.enabled=false -Dorg.eclipse.swt.browser.DefaultType=mozilla"'

    - name: Install keepass # to be able to login into Crashplan
      apt: name=keepass2

    - name: Install git
      apt: name=git

    - name: Clone dotfiles
      sudo: False
      git: repo=https://github.com/berdario/dotfiles.git dest=~/.dotfiles force=no
      ignore_errors: yes # if you want to customize the deploy script and rerun ansible

    - debug: msg="Cloned dotfiles, remember to create/add your ssh key and to correctly set the upstream"

    - name: Deploy dotfiles
      sudo: False
      command: /usr/bin/python3 ~/.dotfiles/deploy.py --dont-prompt
      register: dotfiles_deploy
      changed_when: dotfiles_deploy.stdout

    - name: Add fish repository
      apt_repository: repo='ppa:fish-shell/release-2'

    - name: Install fish
      apt: name=fish

    - name: Set fish as login shell
      user: name={{ansible_env.SUDO_USER}} shell=/usr/bin/fish

    - name: Add docker repository key
      apt_key: id=36A1D7869245C8950F966E92D8576A8BA88D21E9 keyserver=hkp://keyserver.ubuntu.com:80

    # TODO setup pinentry-program (which pinentry-gtk-2) in ~/.gnupg/gpg-agent.conf

    - name: Add extra repositories
      apt_repository: repo="{{item}}"
      with_items:
        - 'deb http://archive.canonical.com/ {{ansible_lsb.codename}} partner' # skype, etc
        - 'ppa:hvr/ghc' # haskell
        - 'deb https://get.docker.io/ubuntu docker main'

    - name: Install other software
      apt: name={{item}}
      with_items:
        - rlwrap
        - gnupg2
        - emacs
        - python3-pip
        - ghc-7.8.3
        - hoogle
        - cabal-install-1.20
        - ghc-7.6.3
        - nodejs
        - npm
        - ruby2.0
        - mono-complete # also needed for keepass plugins
        - ack-grep
        - socat
        - meld
        - mercurial
        - bzr
        - virtualbox
        - vagrant
        - indicator-multiload
        - smuxi
        - electrum
        - psi-plus
        - skype
        - libssl-dev
        - texlive-latex-base
        - texlive-latex-extra
        - texlive-fonts-recommended
        - lxc-docker
        - libreadline-dev # needed by heroku
        - exfat-fuse
        - tree
        - bikeshed
        - nethogs
        - pv
        - whois
        - sshuttle

    - name: Install KeepassHttp plugin # needed for PassIFox
      get_url: url="https://passifox.appspot.com/KeePassHttp.plgx" dest=/usr/lib/keepass2 sha256sum={{keepass_http.sha256}}

    - name: Change default VBox machine folder
      sudo: False
      command: VBoxManage setproperty machinefolder ~/.VirtualBoxVMs
      changed_when: False

    - name: Check if nix is already installed
      stat: path=/nix/store
      register: nixstore

    - name: Download nix-installer
      when: not nixstore.stat.exists
      get_url: url=https://nixos.org/nix/install dest=/tmp/nix-install sha256sum={{nix_installer.sha256}}

    - name: Install nix
      # this install nix for the user, but needs sudo to install some files globally
      # it usually works, assuming that sudo has already been authenticated in previous commands
      sudo: False
      when: not nixstore.stat.exists
      command: /bin/bash /tmp/nix-install

# TODO: create an ansible nix module

    - name: Check if hub is installed
      sudo: False
      command: nix-env -q --installed hub
      register: hub_installed
      changed_when: False

    - name: Install hub
      sudo: False
      when: not hub_installed.stdout
      command: nix-env -i hub

    - name: Clone other software repos
      sudo: False
      git: repo={{item.repo}} dest=~/Applications/{{item.name}}
      ignore_errors: yes
      with_items:
        - {repo: 'https://github.com/sstephenson/rbenv.git', name: 'rbenv'}
        - {repo: 'https://github.com/Bitmessage/PyBitmessage.git', name: 'PyBitmessage'}

    - name: Symlink cloned repos executables
      sudo: False
      file: src=~/Applications/{{ item.path }} dest=~/Applications/bin/{{ item.dest }} state=link
      with_items:
        - {path: 'rbenv/bin/rbenv', dest: 'rbenv'}
        - {path: 'PyBitmessage/src/bitmessagemain.py', dest: 'bitmessage'}

    - name: Clone ruby-build
      sudo: False
      git: repo=git://github.com/sstephenson/ruby-build.git dest=~/.rbenv/plugins/ruby-build

    - name: Install ruby 2.1.2
      sudo: False
      command: rbenv install -s 2.1.2
      register: rbenv_install
      changed_when: rbenv_install.stdout

    - name: Switch to ruby 2.1.2 as default
      sudo: False
      command: rbenv global 2.1.2
      changed_when: False

    - name: Install gems
      sudo: False
      gem: name={{item}}
      with_items:
        - gist
        - bundler
        - rb-readline # needed by heroku
        - heroku
        - rhc

    - name: Rehash rubygem executables
      sudo: False
      command: rbenv rehash
      changed_when: False

    - name: Install node executables
      npm: name={{item}} global=True
      with_items:
        - keybase
