- name: Install git
  apt: name=git

- name: Clone dotfiles
  sudo: False
  git: repo=https://github.com/berdario/dotfiles.git dest=~/.dotfiles force=no
  ignore_errors: yes # if you want to customize the deploy script and rerun ansible

- debug: msg="Cloned dotfiles, remember to create/add your ssh key and to correctly set the upstream"

- name: Deploy dotfiles
  sudo: False
  command: /usr/bin/python3 ~/.dotfiles/deploy.py --dont-prompt
  register: dotfiles_deploy
  changed_when: dotfiles_deploy.stdout

- name: Deploy gitconfig
  sudo: False
  template: src=gitconfig dest=~/.gitconfig

- name: Enable multiverse repository # needed for virtualbox
  command: apt-add-repository multiverse
  register: multiverse
  changed_when: "'already' not in multiverse.stdout"

- name: Add repository keys
  apt_key: id={{item}} keyserver=hkp://keyserver.ubuntu.com:80
  register: addedkeys
  with_items:
    - 36A1D7869245C8950F966E92D8576A8BA88D21E9 # docker
    - 630F626C9FD811EBC19DF0955B2D0C5561707B09 # opam
    - 1C61A2656FB57B7E4DE0F4C1FC918B335044912E # dropbox
    - 4CCA1EAF950CEE4AB83976DCA040830F7FAC5991 # google

- name: Add extra repositories
  apt_repository: repo="{{item}}"
  with_items:
    - 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'
    - 'deb http://archive.canonical.com/ {{ansible_lsb.codename}} partner' # skype, etc
    - 'deb https://get.docker.io/ubuntu docker main'
    - 'deb http://ppa.launchpad.net/avsm/ppa/ubuntu {{ansible_lsb.codename}} main' # opam

- name: Check if Dropbox already installed its own sources
  stat: path=/etc/apt/sources.list.d/dropbox.list
  register: dropbox_repo

- name: Add Dropbox repository
  apt_repository: repo='deb http://linux.dropbox.com/ubuntu {{ansible_lsb.codename}} main'
  when: not dropbox_repo.stat.exists

- apt: update_cache=yes
  when: addedkeys.changed

- name: Install software from extra repositories
  apt: name={{item}}
  with_items:
    - google-chrome-stable
    - dropbox
    - skype
    - lxc-docker
    - ocaml
    - ocaml-native-compilers
    - camlp4-extra
    - opam

- name: Add support for yubikey
  lineinfile: dest=/etc/udev/rules.d/81-yubikey.rules create=yes line='KERNEL=="hidraw*", SUBSYSTEM=="hidraw", MODE="0664", GROUP="plugdev", ATTRS{idVendor}=="1050", ATTRS{idProduct}=="0113|0114|0115|0116|0120"'

# TODO setup pinentry-program (which pinentry-gtk-2) in ~/.gnupg/gpg-agent.conf

- name: Preconfigure wireshark
  shell: echo "wireshark-common wireshark-common/install-setuid boolean true" | debconf-set-selections
  changed_when: False

- name: Install other software
  apt: name={{item}}
  with_items:
    - npm
    - mono-complete # also needed for keepass plugins
    - meld
    - virtualbox
    - vagrant
    - indicator-multiload
    - smuxi
    - libssl-dev
    - texlive-latex-base
    - texlive-latex-extra
    - texlive-fonts-recommended
    - texlive-fonts-extra
    - libffi-dev # needed by ruby-build
    - libreadline-dev # needed by heroku
    - exfat-fuse
    - bikeshed
    - keepass2
    - curl
    - openjdk-8-jre
    - wireshark
    - network-manager-openvpn-gnome
    - alacarte
    - ubuntu-make
    - fish
    - python3-pip
    - python-pip
    - python-qt4 # needed for electrum
    - python-dev
    - libxml2-utils # xmllint
    - postgresql-client
    - mariadb-client-core-10.0
    - ruby2.3

## I'm now using pipsi for electrum, but that requires to manually modify the no-global-site-packages for the env
#- name: Install electrum
#  pip: name='https://download.electrum.org/2.5.4/Electrum-2.5.4.tar.gz'

# apparently there's no easy way to automate ubuntu-make, run these commands manually for now:
# umake ide idea
# umake android android-studio
# umake web firefox-dev

- name: Add to wireshark group
  user: name={{ansible_env.SUDO_USER}} groups=wireshark append=yes

- name: Install KeepassHttp plugin # needed for PassIFox
  get_url: url="https://github.com/pfn/keepasshttp/raw/{{keepass_http.version}}/KeePassHttp.plgx" dest=/usr/lib/keepass2 sha256sum={{keepass_http.sha256}}

- name: Change default VBox machine folder
  sudo: False
  command: VBoxManage setproperty machinefolder ~/.VirtualBoxVMs
  changed_when: False

- name: Disable NetworkManager managing of vboxnet0 # this way it'll correctly come up after suspend
  ini_file: dest=/etc/NetworkManager/NetworkManager.conf section=keyfile option=unmanaged-devices value='interface-name:vboxnet0' backup=yes

- name: /etc/network/interfaces template for vboxnet0 static ip address
  template: src=network_interfaces dest=/etc/network/interfaces backup=yes

- name: Find fish executable
  shell: which fish || true
  register: fish
  changed_when: False

- name: Add the local fish as a valid shell
  when: fish.stdout
  lineinfile: dest=/etc/shells line={{fish.stdout}}

- name: Set fish as login shell
  when: fish.stdout
  user: name={{ansible_env.SUDO_USER}} shell={{fish.stdout}}


- name: Clone other software repos
  sudo: False
  git: repo={{item.repo}} dest=~/Applications/{{item.name}}
  ignore_errors: yes
  with_items:
    - {repo: 'https://github.com/sstephenson/rbenv.git', name: 'rbenv'}
    - {repo: 'https://github.com/Bitmessage/PyBitmessage.git', name: 'PyBitmessage'}

- name: Create user bin directory
  sudo: False
  file: path=~/Applications/bin state=directory

- name: Symlink cloned repos executables
  sudo: False
  file: src=~/Applications/{{ item.path }} dest=~/Applications/bin/{{ item.dest }} state=link
  with_items:
    - {path: 'rbenv/bin/rbenv', dest: 'rbenv'}
    - {path: 'PyBitmessage/src/bitmessagemain.py', dest: 'bitmessage'}

- name: Clone ruby-build
  sudo: False
  git: repo=https://github.com/sstephenson/ruby-build.git dest=~/.rbenv/plugins/ruby-build

- name: Install gems
  sudo: False
  gem: name={{item}} user_install=yes executable=/usr/bin/gem
  with_items:
    - bundler
    - rb-readline # needed by heroku
    - heroku
    - rhc

- name: Check if nix is already installed
  stat: path=/nix/store
  register: nixstore

- name: Download nix
  when: not nixstore.stat.exists
  get_url: url={{nix.url}} dest=/tmp/nix.tar.bz2 sha256sum={{nix.sha256}}

- name: Unpack nix
  when: not nixstore.stat.exists
  unarchive: src=/tmp/nix.tar.bz2 dest=/tmp/ creates={{nix.extract_dir}} copy=no

- name: Workaround nixpkgs issue 6757
  file: state=directory path=/nix/var/nix/profiles/per-user/{{ansible_ssh_user}}

- name: Set /nix owner for single-user installation
  when: not nixstore.stat.exists
  file: owner={{ansible_ssh_user}} recurse=yes path=/nix

- name: Install nix
  when: not nixstore.stat.exists
  sudo: False
  command: bash {{nix.extract_dir}}/install

- name: Get Ludovic Court√®s gpg key for guix
  sudo: False
  command: gpg2 --recv-key 3CE464558A84FDC69DB40CFB090B11993D9AEBB5
  register: ludo_gpg
  changed_when: "'unchanged' not in ludo_gpg.stderr"

- name: Check if guix is already installed
  stat: path=/gnu/store
  register: guixstore

- name: Download guix
  when: not guixstore.stat.exists
  get_url: url={{guix.url}} dest=/tmp/guix.tar.xz sha256sum={{guix.sha256}}

- name: Download guix signature
  when: not guixstore.stat.exists
  get_url: url={{guix.sigurl}} dest=/tmp/guix.tar.xz.sig

- name: Verify guix with gpg
  sudo: False
  when: not guixstore.stat.exists
  command: gpg2 --verify /tmp/guix.tar.xz.sig /tmp/guix.tar.xz
  changed_when: False

- name: Unpack guix
  command: tar -xf /tmp/guix.tar.xz chdir=/ creates=/gnu/store
  # unarchive: src=/tmp/guix.tar.xz dest=/ creates=/gnu/store copy=no
  # BUG https://github.com/ansible/ansible-modules-core/issues/932

- name: Set up root's guix profile
  file: src=/var/guix/profiles/per-user/root/guix-profile dest=/root/.guix-profile state=link

- name: Set up guix build users
  user: name="guixbuilder{{item}}" comment="Guix build user {{item}}" shell=/usr/sbin/nologin groups=guixbuild home=/var/empty system=yes
  with_sequence: start=1 end=10 format=%02d
  changed_when: False # BUG https://github.com/ansible/ansible-modules-core/issues/1118

- name: Install guix systemd service
  file: src=/var/guix/profiles/per-user/root/guix-profile/lib/systemd/system/guix-daemon.service dest=/etc/systemd/system/guix-daemon.service state=link

- name: Enable guix service
  service: name=guix-daemon state=started

- name: symlink guix executable
  sudo: False
  file: src=/var/guix/profiles/per-user/root/guix-profile/bin/guix dest=~/Applications/bin/guix state=link

- name: Authorize guix substitutes
  shell: guix archive --authorize < /var/guix/profiles/per-user/root/guix-profile/share/guix/hydra.gnu.org.pub
  changed_when: False

- name: Install guix's utf-8 locale
  sudo: False
  command: ~/Applications/bin/guix package -i glibc-locales